// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: payment/api/block_types.proto

package api

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Block method issues
//
type BlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Card            *PayInfo       `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
	PaymentToken    *PaymentToken  `protobuf:"bytes,3,opt,name=payment_token,json=paymentToken,proto3" json:"payment_token,omitempty"`
	MerchantOrderId string         `protobuf:"bytes,4,opt,name=merchant_order_id,json=merchantOrderId,proto3" json:"merchant_order_id,omitempty"`
	Amount          uint32         `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Credential      *Credential    `protobuf:"bytes,6,opt,name=credential,proto3" json:"credential,omitempty"`
	CustomParamsRdy *KeyValueArray `protobuf:"bytes,7,opt,name=custom_params_rdy,json=customParamsRdy,proto3" json:"custom_params_rdy,omitempty"`
	Split           []*Split       `protobuf:"bytes,8,rep,name=split,proto3" json:"split,omitempty"`
	PayoutInfo      *PayoutInfo    `protobuf:"bytes,9,opt,name=payout_info,json=payoutInfo,proto3" json:"payout_info,omitempty"`
}

func (x *BlockRequest) Reset() {
	*x = BlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_api_block_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRequest) ProtoMessage() {}

func (x *BlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_api_block_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRequest.ProtoReflect.Descriptor instead.
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return file_payment_api_block_types_proto_rawDescGZIP(), []int{0}
}

func (x *BlockRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BlockRequest) GetCard() *PayInfo {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *BlockRequest) GetPaymentToken() *PaymentToken {
	if x != nil {
		return x.PaymentToken
	}
	return nil
}

func (x *BlockRequest) GetMerchantOrderId() string {
	if x != nil {
		return x.MerchantOrderId
	}
	return ""
}

func (x *BlockRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BlockRequest) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *BlockRequest) GetCustomParamsRdy() *KeyValueArray {
	if x != nil {
		return x.CustomParamsRdy
	}
	return nil
}

func (x *BlockRequest) GetSplit() []*Split {
	if x != nil {
		return x.Split
	}
	return nil
}

func (x *BlockRequest) GetPayoutInfo() *PayoutInfo {
	if x != nil {
		return x.PayoutInfo
	}
	return nil
}

type Split struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplitTerminalId uint32 `protobuf:"varint,1,opt,name=split_terminal_id,json=splitTerminalId,proto3" json:"split_terminal_id,omitempty"`
	Amount          uint32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Purpose         string `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Fee             uint32 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *Split) Reset() {
	*x = Split{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_api_block_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Split) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Split) ProtoMessage() {}

func (x *Split) ProtoReflect() protoreflect.Message {
	mi := &file_payment_api_block_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Split.ProtoReflect.Descriptor instead.
func (*Split) Descriptor() ([]byte, []int) {
	return file_payment_api_block_types_proto_rawDescGZIP(), []int{1}
}

func (x *Split) GetSplitTerminalId() uint32 {
	if x != nil {
		return x.SplitTerminalId
	}
	return 0
}

func (x *Split) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Split) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *Split) GetFee() uint32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type BlockHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool           `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	OrderId            string         `protobuf:"bytes,2,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	Amount             uint32         `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	AuthCode           string         `protobuf:"bytes,4,opt,name=AuthCode,proto3" json:"AuthCode,omitempty"`
	ErrCode            string         `protobuf:"bytes,5,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrMessage         string         `protobuf:"bytes,6,opt,name=ErrMessage,proto3" json:"ErrMessage,omitempty"`
	ACSUrl             string         `protobuf:"bytes,7,opt,name=ACSUrl,proto3" json:"ACSUrl,omitempty"`
	PaReq              string         `protobuf:"bytes,8,opt,name=PaReq,proto3" json:"PaReq,omitempty"`
	ThreeDSKey         string         `protobuf:"bytes,9,opt,name=ThreeDSKey,proto3" json:"ThreeDSKey,omitempty"`
	RRN                string         `protobuf:"bytes,10,opt,name=RRN,proto3" json:"RRN,omitempty"`
	PANMask            string         `protobuf:"bytes,11,opt,name=PANMask,proto3" json:"PANMask,omitempty"`
	BankName           string         `protobuf:"bytes,12,opt,name=BankName,proto3" json:"BankName,omitempty"`
	ProcessingResponse string         `protobuf:"bytes,13,opt,name=ProcessingResponse,proto3" json:"ProcessingResponse,omitempty"`
	CustomParams       *KeyValueArray `protobuf:"bytes,14,opt,name=CustomParams,proto3" json:"CustomParams,omitempty"`
	FeePercent         uint32         `protobuf:"varint,15,opt,name=FeePercent,proto3" json:"FeePercent,omitempty"`
	TerminalID         uint32         `protobuf:"varint,16,opt,name=TerminalID,proto3" json:"TerminalID,omitempty"`
	SourceOffice       string         `protobuf:"bytes,17,opt,name=SourceOffice,proto3" json:"SourceOffice,omitempty"`
}

func (x *BlockHandler) Reset() {
	*x = BlockHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_api_block_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHandler) ProtoMessage() {}

func (x *BlockHandler) ProtoReflect() protoreflect.Message {
	mi := &file_payment_api_block_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHandler.ProtoReflect.Descriptor instead.
func (*BlockHandler) Descriptor() ([]byte, []int) {
	return file_payment_api_block_types_proto_rawDescGZIP(), []int{2}
}

func (x *BlockHandler) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BlockHandler) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *BlockHandler) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BlockHandler) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *BlockHandler) GetErrCode() string {
	if x != nil {
		return x.ErrCode
	}
	return ""
}

func (x *BlockHandler) GetErrMessage() string {
	if x != nil {
		return x.ErrMessage
	}
	return ""
}

func (x *BlockHandler) GetACSUrl() string {
	if x != nil {
		return x.ACSUrl
	}
	return ""
}

func (x *BlockHandler) GetPaReq() string {
	if x != nil {
		return x.PaReq
	}
	return ""
}

func (x *BlockHandler) GetThreeDSKey() string {
	if x != nil {
		return x.ThreeDSKey
	}
	return ""
}

func (x *BlockHandler) GetRRN() string {
	if x != nil {
		return x.RRN
	}
	return ""
}

func (x *BlockHandler) GetPANMask() string {
	if x != nil {
		return x.PANMask
	}
	return ""
}

func (x *BlockHandler) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *BlockHandler) GetProcessingResponse() string {
	if x != nil {
		return x.ProcessingResponse
	}
	return ""
}

func (x *BlockHandler) GetCustomParams() *KeyValueArray {
	if x != nil {
		return x.CustomParams
	}
	return nil
}

func (x *BlockHandler) GetFeePercent() uint32 {
	if x != nil {
		return x.FeePercent
	}
	return 0
}

func (x *BlockHandler) GetTerminalID() uint32 {
	if x != nil {
		return x.TerminalID
	}
	return 0
}

func (x *BlockHandler) GetSourceOffice() string {
	if x != nil {
		return x.SourceOffice
	}
	return ""
}

var File_payment_api_block_types_proto protoreflect.FileDescriptor

var file_payment_api_block_types_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x0d, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x98, 0x01, 0x92, 0x41, 0x94, 0x01, 0x32, 0x88, 0x01,
	0xd0, 0x98, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8,
	0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0x9f, 0xd1, 0x80, 0xd0,
	0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x92, 0xd1,
	0x8b, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x81,
	0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1,
	0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb8, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82,
	0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x2f, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0,
	0xb5, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81,
	0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x56, 0x92, 0x41, 0x53,
	0x32, 0x48, 0xd0, 0x94, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f,
	0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x88, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb7,
	0xd0, 0xb0, 0xd0, 0xba, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x71, 0x0a, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x32, 0x23, 0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0x67, 0x70, 0x61,
	0x79, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x79, 0x2f, 0x73, 0x61, 0x6d, 0x73, 0x75,
	0x6e, 0x67, 0x70, 0x61, 0x79, 0xa2, 0x02, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x86, 0x01, 0x0a,
	0x11, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x4c, 0xd0,
	0x98, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0,
	0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xb8,
	0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0x20, 0xd0, 0x9f, 0xd1, 0x80, 0xd0,
	0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86, 0xd0, 0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x9a, 0x01, 0x92, 0x41, 0x96, 0x01, 0x32, 0x89, 0x01,
	0xd0, 0xa1, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0,
	0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xba, 0xd0,
	0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x85, 0x20, 0x28, 0xd0,
	0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb0,
	0xd1, 0x8f, 0x20, 0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0,
	0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1,
	0x8e, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb8,
	0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0x29, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa9, 0x01, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x70, 0x92, 0x41, 0x6d, 0x32, 0x62,
	0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb6,
	0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
	0xb0, 0xd0, 0xb2, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xbf,
	0xd0, 0xb0, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80,
	0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0x20,
	0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80,
	0xd0, 0xb5, 0xa2, 0x02, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xd7, 0x01, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x64, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42,
	0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x32, 0x7f, 0xd0, 0xa1, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81,
	0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1,
	0x85, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82,
	0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0,
	0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x84, 0xd0, 0xbe, 0xd1,
	0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x27, 0xd0, 0xba, 0xd0, 0xbb, 0xd1,
	0x8e, 0xd1, 0x87, 0x20, 0x2d, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x27, 0xa2, 0x02, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x64,
	0x79, 0x12, 0x8b, 0x03, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0xe0, 0x02, 0x92, 0x41, 0xdc, 0x02, 0x32, 0xd0, 0x02, 0xd0,
	0x98, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd1, 0x83, 0xd0,
	0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1,
	0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd1, 0x8b, 0x20, 0xd0,
	0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0,
	0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0, 0xbf,
	0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbd, 0xd0,
	0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbd,
	0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0x20,
	0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0,
	0xb5, 0xd0, 0xb4, 0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd1, 0x80,
	0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd1,
	0x81, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb3,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x9e,
	0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd0, 0xbc, 0xd0,
	0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x85, 0x20, 0xd1, 0x81, 0xd0,
	0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20,
	0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb9, 0x20, 0xd0, 0xb4, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe,
	0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xbe,
	0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xa2,
	0x02, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0xc0, 0x01, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x85,
	0x01, 0x92, 0x41, 0x81, 0x01, 0x32, 0x76, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
	0x80, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xb4, 0xd0,
	0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbb,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0,
	0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0x2c, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0,
	0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0,
	0xb9, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1,
	0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0x43, 0x32, 0x43, 0xa2, 0x02, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xd1, 0x02, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x85, 0x01, 0x0a,
	0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x59, 0x92, 0x41, 0x56, 0x32, 0x4a, 0xd0,
	0x9d, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80,
	0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0x20, 0xd0, 0xb4, 0xd0,
	0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xb4,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1,
	0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x1f, 0xd0, 0xa1, 0xd1, 0x83, 0xd0,
	0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0, 0xb5,
	0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x32, 0x10, 0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd,
	0xd0, 0xb8, 0xd0, 0xb5, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x1d, 0xd0, 0xa0, 0xd0, 0xb0, 0xd0, 0xb7,
	0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb8, 0xd1,
	0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xc1, 0x12, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x39, 0xd0,
	0xa4, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb3, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5,
	0xd1, 0x88, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd0,
	0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x09, 0x74, 0x72,
	0x75, 0x65, 0x2f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xa2, 0x02, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x2c,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x74,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x5a, 0x92, 0x41, 0x57, 0x32, 0x4c, 0xd0, 0x98, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82,
	0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80,
	0x20, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb0, 0x20,
	0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
	0xb5, 0x20, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x86,
	0xd0, 0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x75, 0x92, 0x41, 0x72, 0x32, 0x66, 0xd0, 0x97, 0xd0, 0xb0,
	0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd0,
	0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x9f, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0,
	0xb4, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2c, 0x20, 0xd0, 0xb5, 0xd1,
	0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0,
	0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3d, 0x74, 0x72,
	0x75, 0x65, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x1d, 0xd0, 0x9a, 0xd0,
	0xbe, 0xd0, 0xb4, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8,
	0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x69, 0x92, 0x41, 0x66, 0x32, 0x5b, 0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0,
	0xba, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x9f, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0,
	0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0,
	0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1,
	0x82, 0xd0, 0xb5, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3d, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x32, 0x65, 0xd0,
	0x9e, 0xd0, 0xbf, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0,
	0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0x2e, 0x20, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbf,
	0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0,
	0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xb1,
	0xd0, 0xba, 0xd0, 0xb8, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x45,
	0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xe5, 0x01, 0x0a, 0x06, 0x41, 0x43,
	0x53, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xcc, 0x01, 0x92, 0x41, 0xc8,
	0x01, 0x32, 0xbc, 0x01, 0xd0, 0x90, 0xd0, 0xb4, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x81, 0x20, 0x28,
	0x55, 0x52, 0x4c, 0x2f, 0x55, 0x52, 0x49, 0x29, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd0,
	0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd0, 0xb0, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x86,
	0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0x33, 0x2d, 0x44, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e,
	0x20, 0xd0, 0x9e, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,
	0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20,
	0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb2,
	0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,
	0xb3, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0x33, 0x2d, 0x44, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x20, 0xd0, 0xb8, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3d, 0x74, 0x72, 0x75, 0x65,
	0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x41, 0x43, 0x53, 0x55, 0x72,
	0x6c, 0x12, 0xd1, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x52, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xba, 0x01, 0x92, 0x41, 0xb6, 0x01, 0x32, 0xaa, 0x01, 0xd0, 0x97, 0xd0, 0xb0, 0xd0,
	0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb0, 0xd1,
	0x83, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0x33, 0x2d, 0x44, 0x20, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x2e, 0x20, 0xd0, 0x9e, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb0,
	0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0x2c, 0x20, 0xd0, 0xb5, 0xd1, 0x81,
	0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0x20,
	0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0x33, 0x2d, 0x44, 0x20, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0xd0, 0xb8, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x3d, 0x74, 0x72, 0x75, 0x65, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x50, 0x61, 0x52, 0x65, 0x71, 0x12, 0xe6, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44,
	0x53, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc5, 0x01, 0x92, 0x41, 0xc1,
	0x01, 0x32, 0xb5, 0x01, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb,
	0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0,
	0xbe, 0xd1, 0x80, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb7, 0xd0, 0xb0,
	0xd0, 0xba, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x9e, 0xd0, 0xb1, 0xd1, 0x8f,
	0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0x2c, 0x20,
	0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1,
	0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x87,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85,
	0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0x33,
	0x2d, 0x44, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0xd0, 0xb8, 0x20, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x3d, 0x74, 0x72, 0x75, 0x65, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x03, 0x52, 0x52, 0x4e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x32, 0x14, 0x52, 0x52, 0x4e, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0,
	0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x03, 0x52, 0x52, 0x4e, 0x12, 0x7b, 0x0a, 0x07, 0x50, 0x41, 0x4e, 0x4d, 0x61, 0x73, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x53, 0xd0, 0x9c, 0xd0, 0xb0,
	0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd,
	0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
	0x80, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xb2, 0x20,
	0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x31,
	0x32, 0x33, 0x34, 0x35, 0x36, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x31, 0x32, 0x33, 0x34, 0xa2,
	0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x50, 0x41, 0x4e, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x5e, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x34, 0xd0, 0x9d, 0xd0, 0xb0, 0xd0, 0xb8,
	0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8,
	0xd0, 0xb5, 0x20, 0xd0, 0x91, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xba, 0xd0, 0xb0, 0x2d, 0xd1, 0x8d,
	0xd0, 0xbc, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb0, 0xa2, 0x02,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x72, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92,
	0x41, 0x3f, 0x32, 0x34, 0xd0, 0x9e, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xbd,
	0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbe, 0xd1,
	0x82, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0x20, 0xd1, 0x8d, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb0,
	0xd0, 0xb9, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x4f, 0xd0,
	0xa1, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xb4, 0xd0, 0xbe,
	0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,
	0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0,
	0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xbe,
	0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xa2, 0x02,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x64, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x35,
	0xd0, 0xa1, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xba, 0xd0,
	0xbe, 0xd0, 0xbc, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb7,
	0xd0, 0xb0, 0x20, 0xd1, 0x8d, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x80, 0xd0,
	0xb8, 0xd0, 0xbd, 0xd0, 0xb3, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x0a, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0xac, 0x01, 0x0a, 0x0a,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x8b, 0x01, 0x92, 0x41, 0x87, 0x01, 0x32, 0x7b, 0x49, 0x44, 0x20, 0xd1, 0x82, 0xd0, 0xb5,
	0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0x20, 0xd0,
	0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5,
	0x20, 0x4d, 0x41, 0x50, 0x2c, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1,
	0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd1, 0x84, 0xd0, 0xb0,
	0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8,
	0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86,
	0xd0, 0xb8, 0xd1, 0x8f, 0xa2, 0x02, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0a,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x7e, 0x0a, 0x0c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x4c, 0xd0, 0x98, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1,
	0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,
	0x80, 0x20, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb7,
	0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0x20,
	0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0xd0, 0xb2, 0x20,
	0x47, 0x44, 0x53, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6d, 0x61, 0x70, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x6d, 0x61, 0x70, 0x2d, 0x74, 0x65,
	0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payment_api_block_types_proto_rawDescOnce sync.Once
	file_payment_api_block_types_proto_rawDescData = file_payment_api_block_types_proto_rawDesc
)

func file_payment_api_block_types_proto_rawDescGZIP() []byte {
	file_payment_api_block_types_proto_rawDescOnce.Do(func() {
		file_payment_api_block_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_payment_api_block_types_proto_rawDescData)
	})
	return file_payment_api_block_types_proto_rawDescData
}

var file_payment_api_block_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_payment_api_block_types_proto_goTypes = []interface{}{
	(*BlockRequest)(nil),  // 0: payment.api.BlockRequest
	(*Split)(nil),         // 1: payment.api.Split
	(*BlockHandler)(nil),  // 2: payment.api.BlockHandler
	(*PayInfo)(nil),       // 3: payment.api.PayInfo
	(*PaymentToken)(nil),  // 4: payment.api.PaymentToken
	(*Credential)(nil),    // 5: payment.api.Credential
	(*KeyValueArray)(nil), // 6: payment.api.KeyValueArray
	(*PayoutInfo)(nil),    // 7: payment.api.PayoutInfo
}
var file_payment_api_block_types_proto_depIdxs = []int32{
	3, // 0: payment.api.BlockRequest.card:type_name -> payment.api.PayInfo
	4, // 1: payment.api.BlockRequest.payment_token:type_name -> payment.api.PaymentToken
	5, // 2: payment.api.BlockRequest.credential:type_name -> payment.api.Credential
	6, // 3: payment.api.BlockRequest.custom_params_rdy:type_name -> payment.api.KeyValueArray
	1, // 4: payment.api.BlockRequest.split:type_name -> payment.api.Split
	7, // 5: payment.api.BlockRequest.payout_info:type_name -> payment.api.PayoutInfo
	6, // 6: payment.api.BlockHandler.CustomParams:type_name -> payment.api.KeyValueArray
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_payment_api_block_types_proto_init() }
func file_payment_api_block_types_proto_init() {
	if File_payment_api_block_types_proto != nil {
		return
	}
	file_payment_api_api_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_payment_api_block_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_api_block_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Split); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_api_block_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payment_api_block_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payment_api_block_types_proto_goTypes,
		DependencyIndexes: file_payment_api_block_types_proto_depIdxs,
		MessageInfos:      file_payment_api_block_types_proto_msgTypes,
	}.Build()
	File_payment_api_block_types_proto = out.File
	file_payment_api_block_types_proto_rawDesc = nil
	file_payment_api_block_types_proto_goTypes = nil
	file_payment_api_block_types_proto_depIdxs = nil
}
